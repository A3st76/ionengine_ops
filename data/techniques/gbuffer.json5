{
    name: "gbuffer",
    uniforms: [
        {
            name: "world",
            type: "cbuffer",
            properties: [
                { name: "view", type: "f32x4x4" },
                { name: "proj", type: "f32x4x4" },
                { name: "camera_position", type: "f32x3" }
            ],
            visibility: "vertex"
        },
        {
            name: "albedo",
            type: "sampler2D",
            visibility: "pixel"
        },
        {
            name: "normal",
            type: "sampler2D",
            visibility: "pixel"
        },
        {
            name: "roughness",
            type: "sampler2D",
            visibility: "pixel"
        },
        {
            name: "metalness",
            type: "sampler2D",
            visibility: "pixel"
        },
        { 
            name: "object", 
            type: "sbuffer", 
            properties: [
                { name: "model", type: "f32x4x4" }
            ],
            visibility: "vertex"
        }
    ],
    shaders: [
        {
            type: "vertex",
            inputs: [
                { name: "position", type: "f32x3", semantic: "POSITION" },
                { name: "uv", type: "f32x2", semantic: "TEXCOORD0" },
                { name: "normal", type: "f32x3", semantic: "NORMAL" },
                { name: "tangent", type: "f32x3", semantic: "TANGENT" },
                { name: "bitangent", type: "f32x3", semantic: "BITANGENT" }
            ],
            outputs: [
                { name: "position", type: "f32x4", semantic: "SV_POSITION" },
                { name: "world_position", type: "f32x3", semantic: "POSITION" },
                { name: "uv", type: "f32x2", semantic: "TEXCOORD0" },
                { name: "normal", type: "f32x3", semantic: "NORMAL" },
                { name: "tangent", type: "f32x3", semantic: "TANGENT" },
                { name: "bitangent", type: "f32x3", semantic: "BITANGENT" }
            ],
            source: "

                #define IONENGINE_OBJECT_TO_WORLD objects[instance].model
                #define IONENGINE_MATRIX_V view
                #define IONENGINE_MATRIX_P proj

                float4x4 inverse(float4x4 m) {
                    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
                    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
                    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
                    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

                    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
                    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
                    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
                    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

                    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
                    float idet = 1.0f / det;

                    float4x4 ret;

                    ret[0][0] = t11 * idet;
                    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
                    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
                    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

                    ret[1][0] = t12 * idet;
                    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
                    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
                    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

                    ret[2][0] = t13 * idet;
                    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
                    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
                    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

                    ret[3][0] = t14 * idet;
                    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
                    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
                    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

                    return ret;
                }

                vs_output main(vs_input input, uint instance : SV_InstanceID) {
                    vs_output output;

                    float4 world_pos = mul(float4(input.position, 1.0f), IONENGINE_OBJECT_TO_WORLD);
                    
                    // vertex in world space
                    output.world_position = world_pos.xyz;

                    // vertex in screen space
                    output.position = mul(mul(world_pos, IONENGINE_MATRIX_V), IONENGINE_MATRIX_P);
                    
                    output.uv = float2(input.uv.x, 1.0f - input.uv.y);

                    output.normal = mul(input.normal, (float3x3)transpose(inverse(IONENGINE_OBJECT_TO_WORLD)));
                    output.tangent = mul(input.tangent, (float3x3)IONENGINE_OBJECT_TO_WORLD);
                    output.bitangent = mul(input.bitangent, (float3x3)IONENGINE_OBJECT_TO_WORLD);

                    return output;
                }
            "
        },
        {
            type: "pixel",
            inputs: [
                { name: "position", type: "f32x4", semantic: "SV_POSITION" },
                { name: "world_position", type: "f32x3", semantic: "POSITION" },
                { name: "uv", type: "f32x2", semantic: "TEXCOORD0" },
                { name: "normal", type: "f32x3", semantic: "NORMAL" },
                { name: "tangent", type: "f32x3", semantic: "TANGENT" },
                { name: "bitangent", type: "f32x3", semantic: "BITANGENT" }
            ],
            outputs: [
                { name: "positions", type: "f32x4", semantic: "SV_TARGET0" },
                { name: "albedo", type: "f32x4", semantic: "SV_TARGET1" },
                { name: "normal", type: "f32x4", semantic: "SV_TARGET2" },
                { name: "roughness_metalness", type: "f32x4", semantic: "SV_TARGET3" },
            ],
            source: "

                ps_output pack_gbuffer(float3 positions, float3 albedo, float3 normal, float roughness, float metalness) {
                    ps_output output;

                    output.positions = float4(positions, 1.0f);
                    output.albedo = float4(albedo, 1.0f);
                    output.normal = float4(normal, 1.0f);
                    output.roughness_metalness = float4(roughness, metalness, 0.0f, 1.0f);

                    return output;
                } 

                ps_output main(ps_input input) {

                    float3 normal = normalize(input.normal);
                    float3 tangent = normalize(input.tangent);
                    float3 bitangent = normalize(input.bitangent);
                    float3x3 tbn = float3x3(tangent, bitangent, normal);
                    float3 normal_map = normal_texture.Sample(normal_sampler, input.uv).xyz * 2.0 - 1.0;

                    float3 albedo = albedo_texture.Sample(albedo_sampler, input.uv).rgb;
                    float roughness = roughness_texture.Sample(roughness_sampler, input.uv).r;
                    float metalness = metalness_texture.Sample(metalness_sampler, input.uv).r;

                    return pack_gbuffer(
                        input.world_position,
                        albedo,
                        normalize(mul(normal_map, tbn)),
                        roughness,
                        metalness
                    );
                }
            "
        }
    ]
}
