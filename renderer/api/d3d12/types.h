// Copyright Â© 2020-2021 Dmitriy Lukovenko. All rights reserved.

#pragma once

namespace ionengine::renderer::api {

class D3DInstance;
class D3DAdapter;
class D3DDevice;
class D3DCommandQueue;
class D3DSwapchain;
class D3DShader;
class D3DPipeline;
class D3DDescriptorSetLayout;
class D3DDescriptorSet;
class D3DDescriptorPool;
class D3DRenderPass;
class D3DResource;
class D3DMemory;
class D3DFence;
class D3DView;

enum class Format {
    Unknown = DXGI_FORMAT_UNKNOWN,
    RGBA32float = DXGI_FORMAT_R32G32B32A32_FLOAT,
    RGBA32uint = DXGI_FORMAT_R32G32B32A32_UINT,
    RGBA32int = DXGI_FORMAT_R32G32B32A32_SINT,
    RGB32float = DXGI_FORMAT_R32G32B32_FLOAT,
    RGB32uint = DXGI_FORMAT_R32G32B32_UINT,
    RGB32int = DXGI_FORMAT_R32G32B32_SINT,
    RG32float = DXGI_FORMAT_R32G32_FLOAT,
    RG32uint = DXGI_FORMAT_R32G32_UINT,
    RG32int = DXGI_FORMAT_R32G32_SINT,
    R32float = DXGI_FORMAT_R32_FLOAT,
    R32uint = DXGI_FORMAT_R32_UINT,
    R32int = DXGI_FORMAT_R32_SINT,
    RGBA16float = DXGI_FORMAT_R16G16B16A16_FLOAT,
    RGBA16uint = DXGI_FORMAT_R16G16B16A16_UINT,
    RGBA16int = DXGI_FORMAT_R16G16B16A16_SINT,
    RGBA16unorm = DXGI_FORMAT_R16G16B16A16_UNORM,
    RGBA16snorm = DXGI_FORMAT_R16G16B16A16_SNORM,
    RG16float = DXGI_FORMAT_R16G16_FLOAT,
    RG16uint = DXGI_FORMAT_R16G16_UINT,
    RG16int = DXGI_FORMAT_R16G16_SINT,
    RG16unorm = DXGI_FORMAT_R16G16_UNORM,
    RG16snorm = DXGI_FORMAT_R16G16_SNORM,
    R16float = DXGI_FORMAT_R16_FLOAT,
    R16uint = DXGI_FORMAT_R16_UINT,
    R16int = DXGI_FORMAT_R16_SINT,
    R16unorm = DXGI_FORMAT_R16_UNORM,
    R16snorm = DXGI_FORMAT_R16_SNORM,
    RGBA8uint = DXGI_FORMAT_R8G8B8A8_UINT,
    RGBA8int = DXGI_FORMAT_R8G8B8A8_SINT,
    RGBA8unorm = DXGI_FORMAT_R8G8B8A8_UNORM,
    RGBA8snorm = DXGI_FORMAT_R8G8B8A8_SNORM,
    RG8uint = DXGI_FORMAT_R8G8_UINT,
    RG8int = DXGI_FORMAT_R8G8_SINT,
    RG8unorm = DXGI_FORMAT_R8G8_UNORM,
    RG8snorm = DXGI_FORMAT_R8G8_SNORM,
    R8uint = DXGI_FORMAT_R8_UINT,
    R8int = DXGI_FORMAT_R8_SINT,
    R8unorm = DXGI_FORMAT_R8_UNORM,
    R8snorm = DXGI_FORMAT_R8_SNORM
};

struct DescriptorTableDesc {
	D3D12_DESCRIPTOR_HEAP_TYPE type;
	uint32 count;
	uint32 offset;
	bool compute;
};

}