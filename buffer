/*auto& graphics_queue = device->get_command_queue(renderer::CommandListType::Graphics);
        auto fence = device->create_fence(0);
        std::cout << m_window.get().get_window_size().width << " " << m_window.get().get_client_size().height << std::endl;

        std::vector<std::unique_ptr<Shader>> shaders;
        shaders.emplace_back(device->create_shader(renderer::read_shader_code("shaders/pc/basic_vert.bin")));
        shaders.emplace_back(device->create_shader(renderer::read_shader_code("shaders/pc/basic_frag.bin")));

        std::vector<renderer::DescriptorSetLayoutBinding> bindings = {
            { renderer::ShaderType::Vertex, renderer::ViewType::ConstantBuffer, 0, 0, 1 }
        };

        auto layout = device->create_descriptor_set_layout(bindings);

        renderer::RenderPassDesc render_pass_desc = { { { renderer::Format::RGBA8unorm, renderer::RenderPassLoadOp::Load, renderer::RenderPassStoreOp::Store } } };
        auto render_pass = device->create_render_pass(render_pass_desc);

        renderer::GraphicsPipelineDesc pipeline_desc = {
            {
                { *shaders[0], renderer::ShaderType::Vertex },
                { *shaders[1], renderer::ShaderType::Pixel }
            },
            *layout,
            {
                { 0, "POSITION", renderer::Format::RGB32float, sizeof(math::Fvector3) }
            },
            *render_pass
        };

        auto pipeline = device->create_graphics_pipeline(pipeline_desc);

        auto memory_block = device->allocate_memory(MemoryType::Default, 512_mb, 0, ResourceFlags::IndexBuffer);

        auto index_buffer = device->create_buffer(ResourceFlags::IndexBuffer, 24_mb);
        index_buffer->bind_memory(*memory_block, 0);

        std::vector<DescriptorPoolSize> pool_sizes = {
            { ViewType::ConstantBuffer, 2 },
            { ViewType::RenderTarget, 2 }
        };

        auto descriptor_pool = device->create_descriptor_pool(pool_sizes);

        ViewDesc view_desc = { ViewType::RenderTarget, ViewDimension::Texture2D };
        auto view_buffer = device->create_view(*descriptor_pool, m_swapchain.get()->get_back_buffer(m_frame_index), view_desc);

        FrameBufferDesc frame_buffer_desc = { *render_pass, 800, 600, { *view_buffer } };
        auto frame_buffer = device->create_frame_buffer(frame_buffer_desc);

        ClearValueDesc clear_value{};

        auto command_list = device->create_command_list(CommandListType::Graphics);
        command_list->bind_pipeline(*pipeline);
        command_list->set_scissor_rect(0, 0, 800, 600);
        command_list->set_viewport(0, 0, 800, 600);
        command_list->resource_barriers({ { m_swapchain.get()->get_back_buffer(m_frame_index), ResourceState::Present, ResourceState::RenderTarget } });
        command_list->begin_render_pass(*render_pass, *frame_buffer, clear_value);
        command_list->end_render_pass();
        command_list->resource_barriers({ { m_swapchain.get()->get_back_buffer(m_frame_index), ResourceState::RenderTarget, ResourceState::Present } });
        command_list->close();*/




        for(auto& resource : m_frame_graph_builder.get()->m_frame_graph_resources) {

        }
            
        auto& resource = m_render_pass_resources->m_render_pass_attachments.begin()->second.view.get().get_resource();

        RenderPassColorDesc render_pass_color_desc = {
            resource.get_format(),
            m_render_pass_resources->m_render_pass_attachments.begin()->second.load_op
        };

        RenderPassDesc render_pass_desc = {
            { { render_pass_color_desc } }
        };

        m_render_passes.emplace_back(m_device.get().create_render_pass(render_pass_desc));
            
        FrameBufferDesc frame_buffer_desc = {
            *m_render_passes.back(),
            800,
            600,
            { { m_render_pass_resources->m_render_pass_attachments.begin()->second.view } }
        };

        m_frame_buffers.emplace_back(m_device.get().create_frame_buffer(frame_buffer_desc));

        std::cout << "Render pass created" << std::endl;


        struct AttachmentDesc {
    RenderPassLoadOp load_op;
    RenderPassStoreOp store_op;
    ClearValueColor clear_value;

    bool operator<(const AttachmentDesc& rhs) const {
        return std::tie(load_op, store_op, clear_value) < std::tie(rhs.load_op, rhs.store_op, rhs.clear_value);
    }
};

struct BufferDesc {

};

struct RenderPassKey {
    std::vector<AttachmentDesc> color_attachments;
    AttachmentDesc depth_stencil_attachment;

    bool operator<(const RenderPassKey& rhs) {
        return std::tie(color_attachments, depth_stencil_attachment) < std::tie(rhs.color_attachments, rhs.depth_stencil_attachment);
    }
};